---
- name: Apply WUfB Reports access control configuration
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Gather minimumal facts for properties like current date
      ansible.builtin.setup:
        gather_subset:
          - min

    # Get this here because: (1) fail fast if doesn't exist (2) need resource ID to assign permissions below
    - name: Gather primary Log Analytics workspace
      block:
        - name: Get primary Log Analytics workspace
          azure.azcollection.azure_rm_resource_info:
            resource_group: "{{ primary_workspace_resource_group }}"
            provider: OperationalInsights
            resource_type: workspaces
            resource_name: "{{ primary_workspace_name }}"
          register: primary_workspace_response
        - name: Save primary workspace to variable
          ansible.builtin.set_fact:
            primary_workspace: "{{ primary_workspace_response.response[0] }}"

    - name: Gather schema for UC tables
      block:
        - name: Get table schema from primary Log Analytics workspace
          azure.azcollection.azure_rm_resource_info:
            api_version: 2022-10-01
            resource_group: "{{ primary_workspace_resource_group }}"
            provider: OperationalInsights
            resource_type: workspaces
            resource_name: "{{ primary_workspace_name }}/tables"
          register: primary_workspace_tables
        - name: Save UC table schema to variable
          ansible.builtin.set_fact:
            uc_tables: "{{ primary_workspace_tables | community.general.json_query(uc_tables_query) }}"
          vars:
            uc_tables_query: "response[?starts_with(name, 'UC')]"

    - name: Setup target resource group
      azure.azcollection.azure_rm_resourcegroup:
        name: "{{ target_resource_group }}"
        location: "{{ target_resource_location }}"
      register: resource_group_response

    - name: Create Log Analytics workspaces for each scope
      loop: "{{ scopes | dict2items }}"
      loop_control:
        loop_var: scope_item
      ansible.builtin.include_tasks: tasks/create_workspace.yml

    - name: Setup data collection endpoint
      block:
        - name: Setup data collection endpoint resource
          azure.azcollection.azure_rm_resource:
            api_version: "2021-09-01-preview"
            resource_group: "{{ target_resource_group }}"
            provider: Insights
            resource_type: dataCollectionEndpoints
            resource_name: "{{ target_resource_prefix }}scope-connector"
            body:
              location: "{{ target_resource_location }}"
              properties: {}
              tags:
                wufb_scope_id: "tenant"
          register: create_dce_result
        - name: Save DCE resource ID and logs ingestion endpoint for subsequent tasks
          ansible.builtin.set_fact:
            dce_resource_id: "{{ create_dce_result.response.id }}"
            dce_logs_ingestion_endpoint: "{{ create_dce_result.response.properties.logsIngestion.endpoint }}"

    - name: Setup data collection rule for each scope
      loop: "{{ scopes | dict2items }}"
      loop_control:
        loop_var: scope_item
      ansible.builtin.include_tasks: tasks/create_dcr.yml

    - name: Setup storage account for function app
      block:
        - name: Register storage provider
          ansible.builtin.command:
            cmd: >
              az provider register --namespace 'Microsoft.Storage'
          changed_when: true
        - name: Create storage account for function app
          azure.azcollection.azure_rm_storageaccount:
            resource_group: "{{ target_resource_group }}"
            name: "{{ function_app_storage_account_name }}{{ tenant_id[:4] }}" # If collisions occur, change to tenant_id | hash('sha1')[:24]
            type: Standard_LRS
          register: create_storage_account_result

    - name: Setup function app
      tags:
        - function_app
        - function_app_create
      block:
        - name: Set fact function app name
          ansible.builtin.set_fact:
            function_app_name: "{{ target_resource_prefix }}scope-connector-{{ tenant_id[:4] }}"
        - name: Create function app
          azure.azcollection.azure_rm_functionapp:
            resource_group: "{{ target_resource_group }}"
            name: "{{ function_app_name }}"
            storage_account: "{{ function_app_storage_account_name }}{{ tenant_id[:4] }}"
            app_settings:
              FUNCTIONS_EXTENSION_VERSION: "~4"
              WEBSITE_NODE_DEFAULT_VERSION: "~18"
              WEBSITE_RUN_FROM_PACKAGE: "1"
              AZURE_SUBSCRIPTION_ID: "{{ subscription_id }}"
              TARGET_RESOURCE_GROUP: "{{ target_resource_group }}"
              PRIMARY_WORKSPACE_RESOURCE_GROUP: "{{ primary_workspace_resource_group }}"
              PRIMARY_WORKSPACE_NAME: "{{ primary_workspace_name }}"
              MAX_DAYS_TO_SYNC: "{{ function_app_max_days_to_sync }}"
          register: create_function_app_result
        - name: Get function app
          azure.azcollection.azure_rm_functionapp_info:
            resource_group: "{{ target_resource_group }}"
            name: "{{ function_app_name }}"
          register: get_function_app_result
        - name: Configure function app to use system assigned identity
          azure.azcollection.azure_rm_resource:
            api_version: "2021-01-15"
            resource_group: "{{ target_resource_group }}"
            provider: Web
            resource_type: sites
            resource_name: "{{ function_app_name }}"
            body:
              location: "{{ target_resource_location }}"
              identity:
                type: "SystemAssigned"
              properties:
                serverFarmId: "{{ get_function_app_result.ansible_info.azure_functionapps[0].server_farm_id }}"
          register: configure_function_app_result
        - name: Save scope connector identity
          ansible.builtin.set_fact:
            scope_connector_identity: "{{ configure_function_app_result.response.identity }}"

    - name: Authorize function app to call Graph
      tags:
        - function_app
        - function_app_authorize_graph
      block:
        - name: Authorize Group.Read.All
          ansible.builtin.include_tasks: tasks/authorize_graph_role.yml
          vars:
            graph_role_name: "Group.Read.All"
        - name: Authorize Device.Read.All
          ansible.builtin.include_tasks: tasks/authorize_graph_role.yml
          vars:
            graph_role_name: "Device.Read.All"

    - name: Authorize function app to workspaces and publishing endpoints
      tags:
        - function_app
        - function_app_authorize_workspaces
      block:
        - name: Authorize scope connector to read resources in the resource group
          # The function app needs access to read resources to discover DCE, DCRs, and workspaces
          azure.azcollection.azure_rm_roleassignment:
            scope: "{{ resource_group_response.state.id }}"
            assignee_object_id: "{{ scope_connector_identity.principalId }}"
            role_definition_id: # Reader
              "/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7"
        - name: Authorize scope connector to read data from primary workspace
          azure.azcollection.azure_rm_roleassignment:
            scope: "{{ primary_workspace.id }}"
            assignee_object_id: "{{ scope_connector_identity.principalId }}"
            role_definition_id: # Log Analytics Reader
              "/providers/Microsoft.Authorization/roleDefinitions/73c42c96-874c-492b-b04d-ab87d138a893"
        - name: Authorize scope connector to publish to the DCE using each scoped DCR
          loop: "{{ scopes | dict2items }}"
          loop_control:
            loop_var: scope_item
          azure.azcollection.azure_rm_roleassignment:
            scope: "{{ scope_item.value.dcr_resource_id }}"
            assignee_object_id: "{{ scope_connector_identity.principalId }}"
            role_definition_id: # Monitoring Metrics Publisher
              "/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb"

    - name: Deploy function app
      tags:
        - function_app
        - deploy_function_app
      block:
        - name: Install function app dependencies
          ansible.builtin.command:
            cmd: npm install
          args:
            chdir: ../azure/functions/wufb-reports-scope-connector
          changed_when: true

        - name: Build function app
          ansible.builtin.command:
            cmd: npm run build
          args:
            chdir: ../azure/functions/wufb-reports-scope-connector
          changed_when: true

        - name: Zip function app
          community.general.archive:
            path: ../azure/functions/wufb-reports-scope-connector/**
            dest: ../azure/functions/wufb-reports-scope-connector.zip
            format: zip
            mode: 0600

        - name: Upload function app
          ansible.builtin.command:
            cmd: >
              az functionapp deployment source config-zip
              -g {{ target_resource_group }}
              -n {{ function_app_name }}
              --src ../azure/functions/wufb-reports-scope-connector.zip
          changed_when: true
